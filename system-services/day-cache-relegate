#!/bin/bash
set -e


echo "day-cache-relegate started at `date`" >> /var/log/audiofile/day-cache-relegate.log

## Global Variables
AUDIOFILE_DAY_CACHE_STORAGE=/mnt/audiofile-day-cache/audio
AUDIOFILE_ROLLING_STORAGE=/mnt/audiofile-legal/audio
AUDIOFILE_ARCHIVE_STORAGE=/mnt/audiofile-archive/audio
ROTTER_BASE=/var/rotter


## Set Defaults
FORMATS="mp2 mp3"
SERVICES="*" # We want all the services in each format!
DATES=$(date -d '2 day ago' +%Y-%m-%d)
KEEP_DAYS=186


## Local Variables
LOGFILE=/var/log/audiofile/day-cache-relegate.log


## Global Function Definitions
logger() {
	if [ -n "$VERBOSE" ] ; then
		echo "$1"
	fi
	echo "[$$]: $1" >> $LOGFILE
}

pipe_logger() {
	while read line ; do
		if [ -n "$VERBOSE" ] ; then
			echo "$line"
		fi
		echo "[$$]: $line" >> $LOGFILE
	done
}


## Local Function Definitions
usage() {
	echo "Usage: $0 [-v] [-n] [-f format] [-s service] [-d date]" >&2
	echo -e "\t-v - verbose" >&2
	echo -e "\t-n - no operation (dry-run)" >&2
	echo -e "\t-f - Default: \"mp2 mp3\"" >&2
	echo -e "\t-s - Default: \"*\"" >&2
	echo -e "\t-d - Default: Yesterday" >&2
	return 0
}

get_services() {
	service_container_dir=$(ls $AUDIOFILE_DAY_CACHE_STORAGE/$format/)
	if [ $? -ne 0 ] ; then return 1 ; fi
	for dir in $service_container_dir ; do
		if [ "$dir" == "lost+found" ] ; then
			# We found lost+found
			logger "Not a service directory: $dir - continuing" >&2
			continue	# Next service candidate
		elif [ ! -d "$AUDIOFILE_DAY_CACHE_STORAGE/$format/$dir" ] ; then
			logger "Not a service directory: $dir - continuing" >&2
			continue
		fi

		echo $dir
	done
	return 0
}

get_dates() {
	date_container_dir=$(ls -d $AUDIOFILE_DAY_CACHE_STORAGE/$format/$service/????-??-??)
	if [ $? -ne 0 ] ; then return 1 ; fi
	for dir in $date_container_dir ; do
		dir=$(basename "$dir")
		if [ "$dir" == "????-??-??" ] ; then
			# We're here when ????-??-?? gets no match
			logger "No date directories in: $AUDIOFILE_DAY_CACHE_STORAGE/$format/$service - continuing" >&2
			continue	# Next date candidate - chances are
					# there are none, so break would
					# probably be just as good here.
		elif [ "$dir" == "lost+found" ] ; then
			# We found lost+found
			logger "Not a date directory: $dir - continuing" >&2
			continue	# Next service candidate
		elif [ ! -d "$AUDIOFILE_DAY_CACHE_STORAGE/$format/$service/$dir" ] ; then
			# Not a directory
			logger "Not a date directory: $dir - continuing" >&2
			continue	# Next service candidate
		elif ! integer_test $(echo "$dir" | tr -d -) ; then
			# Not a date directory
			logger "Not a date directory: $dir - continuing" >&2
			continue	# Next service candidate
		fi
		echo $dir
	done
	return 0
}

integer_test() {
	test $1 -eq 0 &> /dev/null
	local ret=$?
	if [ $ret -eq 0 -o $ret -eq 1 ] ; then
		return 0
	else
		return 1
	fi
}


## Parse Command Line Arguments
while [ $# -ne 0 ] ; do
	OPTION=$1
	OPTARG=$2
	case $OPTION in
	-f)
		FORMATS=$OPTARG
		shift
		;;
	-s)
		SERVICES=$OPTARG
		shift
		;;
	-d)
		DATES=$OPTARG
		shift
		;;
	-n)
		NO_OP=no_op
		;;
	-v)
		VERBOSE=verbose
		;;
	*)
		logger "Illegal argument: $OPTION" >&2
		usage
		exit 1
		;;
	esac
	shift
done


## Command Line Argument Sanity Checks
if [ -z "$FORMATS" ] ; then
	echo "Error: No format specified" >&2
	usage
	exit 1
elif [ -z "$SERVICES" ] ; then
	echo "Error: No services specified" >&2
	usage
	exit 1
elif [ -z "$DATES" ] ; then
	echo "Error: No date specified" >&2
	usage
	exit 1
fi


## Pre-processing


## System Integrity Checks
# Are our filesystems mounted?
if [ ! -d $AUDIOFILE_DAY_CACHE_STORAGE ] ; then
	echo "Error: AUDIOFILE_DAY_CACHE_STORAGE: $AUDIOFILE_DAY_CACHE_STORAGE is not present" >&2
	exit 1
elif [ ! -d $AUDIOFILE_ROLLING_STORAGE ] ; then
	echo "Error: AUDIOFILE_ROLLING_STORAGE: $AUDIOFILE_ROLLING_STORAGE is not present" >&2
	exit 1
elif [ ! -d $AUDIOFILE_ARCHIVE_STORAGE ] ; then
	echo "Error: AUDIOFILE_ARCHIVE_STORAGE: $AUDIOFILE_ARCHIVE_STORAGE is not present" >&2
	exit 1
fi


## Print Operating Parameters (outside the loops / on the innermost loop?)
logger "$0 -f $FORMATS -s $SERVICES -d $DATES ${NO_OP:+-n} ${VERBOSE:+-v}"


## Processing
for format in $FORMATS ; do
	if [ "$SERVICES" == "*" ] ; then
		services=$(get_services)
		if [ -z "$services" ] ; then
			continue	# Next format
		fi
	else
		services="$SERVICES"
	fi
	for service in $services ; do
		if [ "$DATES" == "*" ] ; then
			dates=$(get_dates)
			if [ -z "$dates" ] ; then
				continue	# Next service
			fi
		else
			dates="$DATES"
		fi

		target_storage=$AUDIOFILE_ROLLING_STORAGE
		## Redirect certain services to permanent storage
		if [ "$service" == "radio1" -a "$format" == "mp2" ]; then
			target_storage=$AUDIOFILE_ARCHIVE_STORAGE
		elif [ "$service" == "2fm" -a "$format" == "mp2" ]; then
			target_storage=$AUDIOFILE_ARCHIVE_STORAGE
		elif [ "$service" == "lyricfm" -a "$format" == "mp2" ]; then
			target_storage=$AUDIOFILE_ARCHIVE_STORAGE
		elif [ "$service" == "rnag" -a "$format" == "mp2" ]; then
			target_storage=$AUDIOFILE_ARCHIVE_STORAGE
		fi

		for date in $dates ; do
			# Is it a well formed date directory?
			if ! integer_test "$( echo $date | tr -d -)" ; then
				logger "Not a well formed date: $date - continuing"
				continue
			fi
			# Is it indeed a directory?
			if [ ! -d $AUDIOFILE_DAY_CACHE_STORAGE/$format/$service/$date ]; then
				logger "Not a directory: $date"
				continue
			fi
			# Is the work already done?
			if [ -L $AUDIOFILE_DAY_CACHE_STORAGE/$format/$service/$date ]; then
				logger "Link already created: $AUDIOFILE_DAY_CACHE_STORAGE/$format/$service/$date - continuing"
				continue
			fi

			logger "Moving and Linking: $format $service $date"

			# Are we going ahead with the operation?
			if [ "$NO_OP" == "no_op" ] ; then
				continue	# No operation - skip
			fi

			# Is the target directory there?
			if [ ! -d $target_storage/$format/$service ] ; then
				mkdir -v $target_storage/$format/$service 2>&1 | pipe_logger
			fi
			# If this isn't atomic enough, it may need replacing with a copy, remove and link
			nice -n +1 mv -v $AUDIOFILE_DAY_CACHE_STORAGE/$format/$service/$date $target_storage/$format/$service/$date 2>&1 | pipe_logger
			if [ ${PIPESTATUS[0]} -ne 0 ]; then
				logger "There was a problem moving: $format $service $date"
				continue	# Next date/(service more likely)
			fi
			ln -sv $target_storage/$format/$service/$date $AUDIOFILE_DAY_CACHE_STORAGE/$format/$service/$date 2>&1 | pipe_logger
		done
	done
done
/usr/bin/logger "day-cache-relegate for $DATES finished"
echo "day-cache-relegate for $DATES finished at `date`" >> /var/log/audiofile/day-cache-relegate.log
/usr/local/bin/daily-report
exit 0
